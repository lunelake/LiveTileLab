<phone:PhoneApplicationPage
    x:Class="LiveTileLab.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:phone="clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone"
    xmlns:shell="clr-namespace:Microsoft.Phone.Shell;assembly=Microsoft.Phone"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    FontFamily="{StaticResource PhoneFontFamilyNormal}"
    FontSize="{StaticResource PhoneFontSizeNormal}"
    Foreground="{StaticResource PhoneForegroundBrush}"
    SupportedOrientations="Portrait" Orientation="Portrait"
    shell:SystemTray.IsVisible="True">

    <!--LayoutRoot는 모든 페이지 내용이 배치되는 루트 표입니다.-->
    <Grid x:Name="LayoutRoot" Background="#FF0F88AC">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- 지역화 참고:
            표시된 문자열을 지역화하려면 앱의 중립적인 언어 리소스
            파일(AppResources.resx)에서 적절한 이름으로 지정된 키에 해당 값을
            복사한 후 특성의 따옴표 사이에 하드 코드된 텍스트 값을 경로가 해당
            문자열 이름을 참조하는 바인딩 절로 바꿉니다.

            예:

                Text="{Binding Path=LocalizedResources.ApplicationTitle, Source={StaticResource LocalizedStrings}}"

            이 바인딩은 "ApplicationTitle"이라는 템플릿의 문자열 리소스를 참조합니다.

            프로젝트 속성 탭에 지원되는 언어를 추가하면 언어별로 UI 문자열의
            번역된 값을 포함할 수 있는 새로운 resx 파일이 언어별로
            만들어집니다. 이 예제의 바인딩은 런타임에 앱의 CurrentUICulture와
            일치하는 .resx 파일에서 특성 값을 가져올 수
            있도록 합니다.
         -->

        <!--TitlePanel에는 응용 프로그램 이름 및 페이지 제목이 포함됩니다.-->
        <StackPanel x:Name="TitlePanel" Grid.Row="0" Margin="12,17,0,28">
            <TextBlock Text="바람 연구실" Style="{StaticResource PhoneTextNormalStyle}" Margin="12,0"/>
            <TextBlock Text="라이브 타일" Margin="9,-7,0,0" Style="{StaticResource PhoneTextTitle1Style}"/>
        </StackPanel>

        <!--ContentPanel - 여기에 추가 내용을 배치합니다.-->
        <Grid x:Name="ContentPanel" Grid.Row="1" Margin="12,0,12,0">
            <Button Name="AddFlipLiveTile" Content="Flip Live Tile 추가" HorizontalAlignment="Left" Height="74" Margin="10,24,0,0" VerticalAlignment="Top" Width="416" Click="AddFlipLiveTile_Click"/>
            <Button Name="AddIconicLiveTile" Content="Iconic Live Tile 추가" HorizontalAlignment="Left" Height="74" Margin="10,172,0,0" VerticalAlignment="Top" Width="416" Click="AddIconicLiveTile_Click"/>
            <Button Name="AddCycleTile" Content="Cycle Live Tile 추가" HorizontalAlignment="Left" Height="74" Margin="10,98,0,0" VerticalAlignment="Top" Width="416" Click="AddCycleTile_Click"/>
            <Button Name="ChangeAppBasicTile" Content="앱 기본 라이브타일 변경" HorizontalAlignment="Left" Height="74" Margin="10,246,0,0" VerticalAlignment="Top" Width="416" Click="ChangeAppBasicTile_Click"/>
            <Button Name="MakeImage" Content="이미지 생성" HorizontalAlignment="Left" Height="74" Margin="10,320,0,0" VerticalAlignment="Top" Width="416" Click="MakeImage_Click"/>
            <Button Name="BackGround" Content="백그라운드 동작" HorizontalAlignment="Left" Height="75" Margin="10,394,0,0" VerticalAlignment="Top" Width="416" Click="BackGround_Click"/>
        </Grid>

        <!--공통 경계 내에서 컨트롤을 정렬하는 데 도움이 되도록
            맞춤 모눈을 표시하려면 주석 처리를 제거하세요.  이미지의 위쪽 여백은 시스템 트레이를
            고려하여 -32px입니다. 시스템 트레이가 숨겨진 경우 이를 0으로
            설정합니다(또는 여백을 모두 제거).

            배포하기 전에 이 XAML과 이미지 자체를 제거합니다.-->
        <!--<Image Source="/Assets/AlignmentGrid.png" VerticalAlignment="Top" Height="800" Width="480" Margin="0,-32,0,0" Grid.Row="0" Grid.RowSpan="2" IsHitTestVisible="False" />-->
    </Grid>

</phone:PhoneApplicationPage>